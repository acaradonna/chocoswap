/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FeeSplitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "founderPayout"
      | "owner"
      | "renounceOwnership"
      | "serviceBps"
      | "serviceTreasury"
      | "splitToken"
      | "transferOwnership"
      | "updateSplit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeesSplit"
      | "OwnershipTransferred"
      | "SplitUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "founderPayout",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "splitToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSplit",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "founderPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "serviceBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serviceTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splitToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSplit",
    data: BytesLike
  ): Result;
}

export namespace FeesSplitEvent {
  export type InputTuple = [
    token: AddressLike,
    serviceAmount: BigNumberish,
    founderAmount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    serviceAmount: bigint,
    founderAmount: bigint
  ];
  export interface OutputObject {
    token: string;
    serviceAmount: bigint;
    founderAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitUpdatedEvent {
  export type InputTuple = [
    serviceTreasury: AddressLike,
    founderPayout: AddressLike,
    serviceBps: BigNumberish
  ];
  export type OutputTuple = [
    serviceTreasury: string,
    founderPayout: string,
    serviceBps: bigint
  ];
  export interface OutputObject {
    serviceTreasury: string;
    founderPayout: string;
    serviceBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeSplitter extends BaseContract {
  connect(runner?: ContractRunner | null): FeeSplitter;
  waitForDeployment(): Promise<this>;

  interface: FeeSplitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  founderPayout: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  serviceBps: TypedContractMethod<[], [bigint], "view">;

  serviceTreasury: TypedContractMethod<[], [string], "view">;

  splitToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSplit: TypedContractMethod<
    [
      _serviceTreasury: AddressLike,
      _founderPayout: AddressLike,
      _serviceBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "founderPayout"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "serviceBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "serviceTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "splitToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSplit"
  ): TypedContractMethod<
    [
      _serviceTreasury: AddressLike,
      _founderPayout: AddressLike,
      _serviceBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FeesSplit"
  ): TypedContractEvent<
    FeesSplitEvent.InputTuple,
    FeesSplitEvent.OutputTuple,
    FeesSplitEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SplitUpdated"
  ): TypedContractEvent<
    SplitUpdatedEvent.InputTuple,
    SplitUpdatedEvent.OutputTuple,
    SplitUpdatedEvent.OutputObject
  >;

  filters: {
    "FeesSplit(address,uint256,uint256)": TypedContractEvent<
      FeesSplitEvent.InputTuple,
      FeesSplitEvent.OutputTuple,
      FeesSplitEvent.OutputObject
    >;
    FeesSplit: TypedContractEvent<
      FeesSplitEvent.InputTuple,
      FeesSplitEvent.OutputTuple,
      FeesSplitEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SplitUpdated(address,address,uint16)": TypedContractEvent<
      SplitUpdatedEvent.InputTuple,
      SplitUpdatedEvent.OutputTuple,
      SplitUpdatedEvent.OutputObject
    >;
    SplitUpdated: TypedContractEvent<
      SplitUpdatedEvent.InputTuple,
      SplitUpdatedEvent.OutputTuple,
      SplitUpdatedEvent.OutputObject
    >;
  };
}
